// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on UserSignUpRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UserSignUpRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserName()); l < 6 || l > 32 {
		return UserSignUpRequestValidationError{
			field:  "UserName",
			reason: "value length must be between 6 and 32 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 32 {
		return UserSignUpRequestValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 32 runes, inclusive",
		}
	}

	return nil
}

// UserSignUpRequestValidationError is the validation error returned by
// UserSignUpRequest.Validate if the designated constraints aren't met.
type UserSignUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserSignUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserSignUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserSignUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserSignUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserSignUpRequestValidationError) ErrorName() string {
	return "UserSignUpRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserSignUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserSignUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserSignUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserSignUpRequestValidationError{}

// Validate checks the field values on UserSignUpReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UserSignUpReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserSignUpReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UserSignUpReplyValidationError is the validation error returned by
// UserSignUpReply.Validate if the designated constraints aren't met.
type UserSignUpReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserSignUpReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserSignUpReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserSignUpReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserSignUpReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserSignUpReplyValidationError) ErrorName() string { return "UserSignUpReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserSignUpReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserSignUpReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserSignUpReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserSignUpReplyValidationError{}

// Validate checks the field values on UserLoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UserLoginRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserName()); l < 6 || l > 32 {
		return UserLoginRequestValidationError{
			field:  "UserName",
			reason: "value length must be between 6 and 32 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 32 {
		return UserLoginRequestValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 32 runes, inclusive",
		}
	}

	return nil
}

// UserLoginRequestValidationError is the validation error returned by
// UserLoginRequest.Validate if the designated constraints aren't met.
type UserLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLoginRequestValidationError) ErrorName() string { return "UserLoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLoginRequestValidationError{}

// Validate checks the field values on UserLoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserLoginReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserLoginReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UserLoginReplyValidationError is the validation error returned by
// UserLoginReply.Validate if the designated constraints aren't met.
type UserLoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLoginReplyValidationError) ErrorName() string { return "UserLoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserLoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLoginReplyValidationError{}

// Validate checks the field values on UserUpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UserUpdateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserName()); l < 6 || l > 32 {
		return UserUpdateRequestValidationError{
			field:  "UserName",
			reason: "value length must be between 6 and 32 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 32 {
		return UserUpdateRequestValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 32 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetNewName()); l < 6 || l > 32 {
		return UserUpdateRequestValidationError{
			field:  "NewName",
			reason: "value length must be between 6 and 32 runes, inclusive",
		}
	}

	return nil
}

// UserUpdateRequestValidationError is the validation error returned by
// UserUpdateRequest.Validate if the designated constraints aren't met.
type UserUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateRequestValidationError) ErrorName() string {
	return "UserUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateRequestValidationError{}

// Validate checks the field values on UserUpdateReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UserUpdateReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserUpdateReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UserUpdateReplyValidationError is the validation error returned by
// UserUpdateReply.Validate if the designated constraints aren't met.
type UserUpdateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateReplyValidationError) ErrorName() string { return "UserUpdateReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserUpdateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateReplyValidationError{}

// Validate checks the field values on UserSignUpReply_UserSignupInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UserSignUpReply_UserSignupInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for UserName

	return nil
}

// UserSignUpReply_UserSignupInfoValidationError is the validation error
// returned by UserSignUpReply_UserSignupInfo.Validate if the designated
// constraints aren't met.
type UserSignUpReply_UserSignupInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserSignUpReply_UserSignupInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserSignUpReply_UserSignupInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserSignUpReply_UserSignupInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserSignUpReply_UserSignupInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserSignUpReply_UserSignupInfoValidationError) ErrorName() string {
	return "UserSignUpReply_UserSignupInfoValidationError"
}

// Error satisfies the builtin error interface
func (e UserSignUpReply_UserSignupInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserSignUpReply_UserSignupInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserSignUpReply_UserSignupInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserSignUpReply_UserSignupInfoValidationError{}

// Validate checks the field values on UserLoginReply_UserLoginInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UserLoginReply_UserLoginInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for UserName

	// no validation rules for LoginToken

	// no validation rules for RefreshToken

	return nil
}

// UserLoginReply_UserLoginInfoValidationError is the validation error returned
// by UserLoginReply_UserLoginInfo.Validate if the designated constraints
// aren't met.
type UserLoginReply_UserLoginInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLoginReply_UserLoginInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLoginReply_UserLoginInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLoginReply_UserLoginInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLoginReply_UserLoginInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLoginReply_UserLoginInfoValidationError) ErrorName() string {
	return "UserLoginReply_UserLoginInfoValidationError"
}

// Error satisfies the builtin error interface
func (e UserLoginReply_UserLoginInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLoginReply_UserLoginInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLoginReply_UserLoginInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLoginReply_UserLoginInfoValidationError{}
